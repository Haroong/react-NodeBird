{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// initialState\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: []\n  }\n}; // action creator - 사용자의 입력에 따라 동적으로 생성\n\nconst changeNickname = data => {\n  return {\n    type: 'CHANGE_NICKNAME',\n    data\n  };\n};\n\nconst login = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\n\nchangeNickname('boogi'); // (이전 상태, 액션) => 다음 상태\n// initialState, action => return data\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true\n        })\n      });\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/react-nodebird/prepare/front/reducers/index.js"],"names":["initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","changeNickname","data","type","login","rootReducer","state","action"],"mappings":";;;;;;AAAA;AACA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,KADR;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB,C,CAYA;;AACA,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE,iBADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALD;;AAOA,MAAME,KAAK,GAAIF,IAAD,IAAU;AACtB,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALD;;AAOAD,cAAc,CAAC,OAAD,CAAd,C,CAEA;AACA;;AACA,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAK,QAAL;AACE,6CACKG,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AAEFC,UAAAA,UAAU,EAAE;AAFV;AAFN;AAFJ;AAUD,CAXD;;AAaA,eAAeS,WAAf","sourcesContent":["// initialState\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\n// action creator - 사용자의 입력에 따라 동적으로 생성\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: 'CHANGE_NICKNAME',\r\n    data,\r\n  };\r\n};\r\n\r\nconst login = (data) => {\r\n  return {\r\n    type: 'LOG_IN',\r\n    data,\r\n  };\r\n};\r\n\r\nchangeNickname('boogi');\r\n\r\n// (이전 상태, 액션) => 다음 상태\r\n// initialState, action => return data\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'LOG_IN':\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: true,\r\n        },\r\n      };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}