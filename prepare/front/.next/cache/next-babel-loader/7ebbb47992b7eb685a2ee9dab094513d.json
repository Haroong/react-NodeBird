{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper'; // initialState\n\nconst initialState = {\n  user: {},\n  post: {\n    mainPosts: []\n  }\n}; // action creator - 사용자의 입력에 따라 동적으로 생성\n\nexport const loginAction = data => {\n  return {\n    type: 'LOG_IN',\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: 'LOG_OUT'\n  };\n}; // (이전 상태, 액션) => 다음 상태\n// initialState, action => return data\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n    // 이걸 빠뜨리면 Reducer 'user' returned undefiend error 발생\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/react-nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action","payload","isLoggedIn"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAFa,CAArB,C,CAOA;;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;AACA;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGT,YAAT,EAAuBU,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE,SAAKP,OAAL;AACE,6CACKU,KADL,GAEKC,MAAM,CAACC,OAFZ;;AAIF,SAAK,QAAL;AACE,6CACKF,KADL;AAEER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFW,UAAAA,UAAU,EAAE,IAFV;AAGFX,UAAAA,IAAI,EAAES,MAAM,CAACL;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKI,KADL;AAEER,QAAAA,IAAI,kCACCQ,KAAK,CAACR,IADP;AAEFW,UAAAA,UAAU,EAAE,KAFV;AAGFX,UAAAA,IAAI,EAAE;AAHJ;AAFN;;AAQF;AACE,aAAOQ,KAAP;AAAc;AAzBlB;AA2BD,CA5BD;;AA8BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\n\r\n// initialState\r\nconst initialState = {\r\n  user: {},\r\n  post: {\r\n    mainPosts: [],\r\n  },\r\n};\r\n\r\n// action creator - 사용자의 입력에 따라 동적으로 생성\r\nexport const loginAction = (data) => {\r\n  return {\r\n    type: 'LOG_IN',\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutAction = () => {\r\n  return {\r\n    type: 'LOG_OUT',\r\n  };\r\n};\r\n\r\n// (이전 상태, 액션) => 다음 상태\r\n// initialState, action => return data\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case HYDRATE:\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    case 'LOG_IN':\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: true,\r\n          user: action.data,\r\n        },\r\n      };\r\n    case 'LOG_OUT':\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        },\r\n      };\r\n    default:\r\n      return state; // 이걸 빠뜨리면 Reducer 'user' returned undefiend error 발생\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}